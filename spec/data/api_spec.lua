describe('api', function()
  local yaml = require('wowapi.yaml')
  local products = require('wowless.util').productList()
  local used = {}
  for _, p in ipairs(products) do
    for _, v in pairs(yaml.parseFile('data/products/' .. p .. '/apis.yaml')) do
      used[v] = true
    end
  end
  local data = require('wowapi.data')
  for filename in require('lfs').dir('data/api') do
    if filename ~= '.' and filename ~= '..' then
      assert(filename:sub(-5) == '.yaml', 'invalid file ' .. filename)
      describe(filename, function()
        local t = yaml.parseFile('data/api/' .. filename)
        it('has exactly one implementation', function()
          if t.status == 'autogenerated' or t.status == 'unimplemented' then
            assert.Nil(t.frameworks, 'unimplemented apis cannot specify frameworks')
            assert.Nil(t.states, 'unimplemented apis cannot specify states')
            assert.Nil(data.impl[t.name], 'unimplemented apis cannot have an implementation')
          elseif t.status == 'implemented' then
            assert.Not.Nil(data.impl[t.name], 'implemented apis must have an implementation')
            for _, output in ipairs(t.outputs or {}) do
              assert.Nil(output.stub, 'implemented apis cannot specify return values')
            end
          else
            assert(t.alias or t.stdlib, 'unsupported status')
          end
        end)
        it('is used by at least one product', function()
          assert(used[t.name])
        end)
      end)
    end
  end
  local schema = yaml.parseFile('data/schemas/api.yaml').type
  describe('schema', function()
    for _, p in ipairs(products) do
      describe(p, function()
        for k, v in pairs(yaml.parseFile('data/products/' .. p .. '/apis.yaml')) do
          describe(k, function()
            it('validates', function()
              require('wowapi.schema').validate(p, schema, data.apis[v])
            end)
          end)
        end
      end)
    end
  end)
end)
